Call;Response
importing;You can import installed python packages using "import [packages]". You can also import modules at a more detailed level "import [packages].[module]". Sometimes this is preferable because it allows the creation of direct shortcuts to the modules you commonly use "import [packages].[module] as [nickname]". Intead of using the full path of the module each time you want to use it, you can use the nickname. There are informal conventions on nicknames for popular packages: "numpy" is often called "np", "pandas" are "pd". More detail: https://docs.python.org/3/reference/import.html 
index_selection;You can call elements of a panda DataFrame using column names or row indexes using the name of the dataframe and square brackets, e.g. Auto["mpg"] would call the mpg column of Auto. Auto[10:20] would call row 10 to 19. Notice that python indexes start at zero, and the last number of the index is exclusive rather than inclusive. More detail: https://pandas.pydata.org/pandas-docs/stable/indexing.html
smf_OLS;Make sure that you assign the results of this formula to a new object, or you won't be able to use it later (i.e. lm = ...)! The formula is like "smf.OLS('formula',data=dataset).fit()". Importantly, this code does two steps at once - ".fit()" is a method of a linear model object which tells python to fit the model. We're both creating the object and fitting the model it in one step.
smf_formula;The basic format of a formula is "IndependentVariable ~ Model". The formula has to be enclosed in quotes when used in the smf OLS method. For example, a regression trying to explain happiness using money and sucess would be: 'happiness~money+sucess'. This style of formula is written in Patsy, which can allow some very complicated models. More Detail: http://patsy.readthedocs.io/en/latest/overview.html
printing;The "print()" method is used to print. You can concatenate and format items using print in a variety of way. print("x","y") will print ("x","y") - that's a list. You can also add special characters to a print statement like "\n" which inserts a new line (More detail: https://docs.python.org/2.0/ref/strings.html). Another common feature of the print function is "string formatting" - you can use %s, %d, or %f to add a string, digit, or formatted value into a pint statement. So, for example print("%d is %s then %0.3f") % 3, "less", math.pi would print "3 is less than 3.142". More detail: https://docs.python.org/3/tutorial/inputoutput.html
plot_basics;You use pyplot by layering up elements of a graph and then showing them - the order that you layer the elements is the order that they appear in (with a few complex exceptions). You create a plot using one of the range of graph types available in pytplot such as "scatter" or "bar". You add elements to a plot using the build in methods of pyplot, such as "xlabel("x-label")" or "ylabel("y-label)". Each of thse methods has options you can use to specify the plot you create. e.g. plt.scatter([x-data],[y-data]). Once you ahve added all the layers, you can display the graph using plt.show(). More Detail: https://matplotlib.org/api/pyplot_summary.html
plot_options;Many elemnents of the pyplot API can be customised using options. For example, plt.xlabel("x-label",20) will create an x-label in size twenty font, whilst plt.scatter([x-data],[y-data],marker="+",color="blue") will make the markers on your scatter plot blue plus symbols. These options are docunmented here:https://matplotlib.org/api/pyplot_summary.html.
diagnostic_graphs;You can access the fitted values, residuals and standardised residuals as methods of your linear model. For example, lm.fittedvalues will return your models fitted values as an array.
get_leverage;Different measures of leverage are accessible using the "get_influence()" method of your linear model - in this case we want to use the diagonal elements of the hat matrix. You could use the dir() function to investigate which methods are available: dir(lm.get_influence()).
square_root;You can square root a number in python by raising a number to the power of 0.5 using a double asterisk (to the power of). For example 9**0.5 would return 3. There is also a square root function in the "maths" library.
plot_layout;You can plot relatively simple graphs using the subplot method. The syntax is "subplot(number_of_rows, number_of_columns, plot_number)", so for example you could create the second graph in a 2 by 2 plot using plt.subplot(222). There is more detailed documentation and a number of examples here: https://matplotlib.org/api/_as_gen/matplotlib.pyplot.subplot.html. You can plot more complex figures using the gridspec method: https://matplotlib.org/users/gridspec.html
argmax;You can get the index of the highest value observation using the "argmax()" method. For example, if you wanted to get the index of the obvervation with the highest pearson residual you could use "(lm.resid_pearson).argmax()". Further documentaiton can be found here: https://docs.scipy.org/doc/numpy/reference/generated/numpy.argmax.html
loc;You can use the "loc()" and "iloc()" methods to select elements of a dataframe. loc() is primarily intended to use label indexing, and iloc is primarily intended to use integer indexing (don't forget that python indexing is zero based!). The syntax is "dataframe.loc(row_elements,column_elements)". For example, if you wanted to select the number of cylinders for the 3rd row you could use the syntax "Auto.loc[2,["cylinders"]]". Further documentation, including how to using loc() and iloc() for slicing, you can find it here: https://pandas.pydata.org/pandas-docs/stable/indexing.html